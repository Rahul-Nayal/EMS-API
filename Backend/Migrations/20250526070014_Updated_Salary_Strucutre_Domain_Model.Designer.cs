// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(EMSDbContext))]
    [Migration("20250526070014_Updated_Salary_Strucutre_Domain_Model")]
    partial class Updated_Salary_Strucutre_Domain_Model
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Model.Domain.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Backend.Model.Domain.AssetType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AssetImageUrl")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AssetImageUrl");

                    b.ToTable("AssetTypes");
                });

            modelBuilder.Entity("Backend.Model.Domain.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<TimeSpan?>("InTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan?>("OutTime")
                        .HasColumnType("time(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("Backend.Model.Domain.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Issue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Backend.Model.Domain.ContactDetails", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("EmergencyContactNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("EmployeeId");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("Backend.Model.Domain.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Backend.Model.Domain.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<long>("CGPA")
                        .HasColumnType("bigint");

                    b.Property<int>("Course")
                        .HasColumnType("int");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Backend.Model.Domain.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("JobRoleId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProfileImageUrl")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SalaryStructureId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobRoleId");

                    b.HasIndex("ProfileImageUrl");

                    b.HasIndex("SalaryStructureId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Backend.Model.Domain.EmployeeProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmployeeProjects");
                });

            modelBuilder.Entity("Backend.Model.Domain.FamilyDetail", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.HasKey("EmployeeId");

                    b.ToTable("FamilyDetails");
                });

            modelBuilder.Entity("Backend.Model.Domain.FamilyMemberDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<Guid>("FamilyDetailId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("Relation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FamilyDetailId");

                    b.ToTable("FamilyMemberDetails");
                });

            modelBuilder.Entity("Backend.Model.Domain.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FileDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Backend.Model.Domain.JobRole", b =>
                {
                    b.Property<Guid>("JobRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("JobRoleId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("JobRoles");
                });

            modelBuilder.Entity("Backend.Model.Domain.Leave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("LeaveTypeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("Leaves");
                });

            modelBuilder.Entity("Backend.Model.Domain.LeaveType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxDaysAllowed")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("LeaveTypes");
                });

            modelBuilder.Entity("Backend.Model.Domain.Payroll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<long>("Deduction")
                        .HasColumnType("bigint");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<long>("GrossPay")
                        .HasColumnType("bigint");

                    b.Property<long>("NetSalary")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentMode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Payrolls");
                });

            modelBuilder.Entity("Backend.Model.Domain.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProjectImageUrl")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectImageUrl");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Backend.Model.Domain.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Expire")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Backend.Model.Domain.SalaryStructure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<long>("BasicPay")
                        .HasColumnType("bigint");

                    b.Property<long>("Bonus")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<long>("Deduction")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<long>("HRA")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("NetSalary")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SalaryStructures");
                });

            modelBuilder.Entity("Backend.Model.Domain.WorkExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("JobRole")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkExperiences");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63",
                            ConcurrencyStamp = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "7f99b3c4-6cf1-44b7-b62b-e7411b52a89d",
                            ConcurrencyStamp = "7f99b3c4-6cf1-44b7-b62b-e7411b52a89d",
                            Name = "Employee",
                            NormalizedName = "Employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.View",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Create",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Update",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Delete",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Attendance.View",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Attendance.Create",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Attendance.Update",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Attendance.Delete",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Certificate.View",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Certificate.Create",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Certificate.Update",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Certificate.Delete",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Education.View",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Education.Create",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Education.Update",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Education.Delete",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.WorkExperience.View",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.WorkExperience.Create",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.WorkExperience.Update",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.WorkExperience.Delete",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.ContactDetails.View",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.ContactDetails.Create",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.ContactDetails.Update",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.ContactDetails.Delete",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.FamilyDetail.View",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.FamilyDetail.Create",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 27,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.FamilyDetail.Update",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 28,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.FamilyDetail.Delete",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 29,
                            ClaimType = "Permission",
                            ClaimValue = "Department.View",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 30,
                            ClaimType = "Permission",
                            ClaimValue = "Department.Create",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 31,
                            ClaimType = "Permission",
                            ClaimValue = "Department.Update",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 32,
                            ClaimType = "Permission",
                            ClaimValue = "Department.Delete",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 33,
                            ClaimType = "Permission",
                            ClaimValue = "JobRole.View",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 34,
                            ClaimType = "Permission",
                            ClaimValue = "JobRole.Create",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 35,
                            ClaimType = "Permission",
                            ClaimValue = "JobRole.Update",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 36,
                            ClaimType = "Permission",
                            ClaimValue = "JobRole.Delete",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 37,
                            ClaimType = "Permission",
                            ClaimValue = "Asset.View",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 38,
                            ClaimType = "Permission",
                            ClaimValue = "Asset.Create",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 39,
                            ClaimType = "Permission",
                            ClaimValue = "Asset.Update",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 40,
                            ClaimType = "Permission",
                            ClaimValue = "Asset.Delete",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 41,
                            ClaimType = "Permission",
                            ClaimValue = "AssetType.View",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 42,
                            ClaimType = "Permission",
                            ClaimValue = "AssetType.Create",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 43,
                            ClaimType = "Permission",
                            ClaimValue = "AssetType.Update",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 44,
                            ClaimType = "Permission",
                            ClaimValue = "AssetType.Delete",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 45,
                            ClaimType = "Permission",
                            ClaimValue = "LeaveType.View",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 46,
                            ClaimType = "Permission",
                            ClaimValue = "LeaveType.Create",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 47,
                            ClaimType = "Permission",
                            ClaimValue = "LeaveType.Update",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 48,
                            ClaimType = "Permission",
                            ClaimValue = "LeaveType.Delete",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 49,
                            ClaimType = "Permission",
                            ClaimValue = "Leave.View",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 50,
                            ClaimType = "Permission",
                            ClaimValue = "Leave.Create",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 51,
                            ClaimType = "Permission",
                            ClaimValue = "Leave.Update",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 52,
                            ClaimType = "Permission",
                            ClaimValue = "Leave.Delete",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 53,
                            ClaimType = "Permission",
                            ClaimValue = "SalaryStructure.View",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 54,
                            ClaimType = "Permission",
                            ClaimValue = "SalaryStructure.Create",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 55,
                            ClaimType = "Permission",
                            ClaimValue = "SalaryStructure.Update",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 56,
                            ClaimType = "Permission",
                            ClaimValue = "SalaryStructure.Delete",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 57,
                            ClaimType = "Permission",
                            ClaimValue = "Payroll.View",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 58,
                            ClaimType = "Permission",
                            ClaimValue = "Payroll.Create",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 59,
                            ClaimType = "Permission",
                            ClaimValue = "Payroll.Update",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 60,
                            ClaimType = "Permission",
                            ClaimValue = "Payroll.Delete",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 61,
                            ClaimType = "Permission",
                            ClaimValue = "Project.View",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 62,
                            ClaimType = "Permission",
                            ClaimValue = "Project.Create",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 63,
                            ClaimType = "Permission",
                            ClaimValue = "Project.Update",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 64,
                            ClaimType = "Permission",
                            ClaimValue = "Project.Delete",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 65,
                            ClaimType = "Permission",
                            ClaimValue = "EmployeeProject.View",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 66,
                            ClaimType = "Permission",
                            ClaimValue = "EmployeeProject.Assign",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 67,
                            ClaimType = "Permission",
                            ClaimValue = "EmployeeProject.Unassign",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 68,
                            ClaimType = "Permission",
                            ClaimValue = "EmployeeProject.UpdateRole",
                            RoleId = "1d8c4ef2-7b23-4b92-a7e2-178bfe7ecf63"
                        },
                        new
                        {
                            Id = 69,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.View",
                            RoleId = "7f99b3c4-6cf1-44b7-b62b-e7411b52a89d"
                        },
                        new
                        {
                            Id = 70,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Attendance.View",
                            RoleId = "7f99b3c4-6cf1-44b7-b62b-e7411b52a89d"
                        },
                        new
                        {
                            Id = 71,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Attendance.Create",
                            RoleId = "7f99b3c4-6cf1-44b7-b62b-e7411b52a89d"
                        },
                        new
                        {
                            Id = 72,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Attendance.Update",
                            RoleId = "7f99b3c4-6cf1-44b7-b62b-e7411b52a89d"
                        },
                        new
                        {
                            Id = 73,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Certificate.View",
                            RoleId = "7f99b3c4-6cf1-44b7-b62b-e7411b52a89d"
                        },
                        new
                        {
                            Id = 74,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.Education.View",
                            RoleId = "7f99b3c4-6cf1-44b7-b62b-e7411b52a89d"
                        },
                        new
                        {
                            Id = 75,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.WorkExperience.View",
                            RoleId = "7f99b3c4-6cf1-44b7-b62b-e7411b52a89d"
                        },
                        new
                        {
                            Id = 76,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.ContactDetails.View",
                            RoleId = "7f99b3c4-6cf1-44b7-b62b-e7411b52a89d"
                        },
                        new
                        {
                            Id = 77,
                            ClaimType = "Permission",
                            ClaimValue = "Employee.FamilyDetail.View",
                            RoleId = "7f99b3c4-6cf1-44b7-b62b-e7411b52a89d"
                        },
                        new
                        {
                            Id = 78,
                            ClaimType = "Permission",
                            ClaimValue = "Leave.View",
                            RoleId = "7f99b3c4-6cf1-44b7-b62b-e7411b52a89d"
                        },
                        new
                        {
                            Id = 79,
                            ClaimType = "Permission",
                            ClaimValue = "Payroll.View",
                            RoleId = "7f99b3c4-6cf1-44b7-b62b-e7411b52a89d"
                        },
                        new
                        {
                            Id = 80,
                            ClaimType = "Permission",
                            ClaimValue = "Asset.View",
                            RoleId = "7f99b3c4-6cf1-44b7-b62b-e7411b52a89d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Model.Domain.Asset", b =>
                {
                    b.HasOne("Backend.Model.Domain.AssetType", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Domain.Employee", "Employee")
                        .WithMany("Assets")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Backend.Model.Domain.AssetType", b =>
                {
                    b.HasOne("Backend.Model.Domain.Image", "AssetImage")
                        .WithMany()
                        .HasForeignKey("AssetImageUrl");

                    b.Navigation("AssetImage");
                });

            modelBuilder.Entity("Backend.Model.Domain.Attendance", b =>
                {
                    b.HasOne("Backend.Model.Domain.Employee", "Employee")
                        .WithMany("Attendance")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Backend.Model.Domain.Certificate", b =>
                {
                    b.HasOne("Backend.Model.Domain.Employee", "Employee")
                        .WithMany("Certificates")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Backend.Model.Domain.ContactDetails", b =>
                {
                    b.HasOne("Backend.Model.Domain.Employee", "Employee")
                        .WithOne("ContactDetails")
                        .HasForeignKey("Backend.Model.Domain.ContactDetails", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Backend.Model.Domain.Education", b =>
                {
                    b.HasOne("Backend.Model.Domain.Employee", "Employee")
                        .WithMany("Educations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Backend.Model.Domain.Employee", b =>
                {
                    b.HasOne("Backend.Model.Domain.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Domain.JobRole", "JobRole")
                        .WithMany()
                        .HasForeignKey("JobRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Domain.Image", "ProfileImage")
                        .WithMany()
                        .HasForeignKey("ProfileImageUrl");

                    b.HasOne("Backend.Model.Domain.SalaryStructure", "SalaryStructure")
                        .WithMany()
                        .HasForeignKey("SalaryStructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("IdentityUser");

                    b.Navigation("JobRole");

                    b.Navigation("ProfileImage");

                    b.Navigation("SalaryStructure");
                });

            modelBuilder.Entity("Backend.Model.Domain.EmployeeProject", b =>
                {
                    b.HasOne("Backend.Model.Domain.Employee", "Employee")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Domain.Project", "Project")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Backend.Model.Domain.FamilyDetail", b =>
                {
                    b.HasOne("Backend.Model.Domain.Employee", "Employee")
                        .WithOne("FamilyDetail")
                        .HasForeignKey("Backend.Model.Domain.FamilyDetail", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Backend.Model.Domain.FamilyMemberDetail", b =>
                {
                    b.HasOne("Backend.Model.Domain.FamilyDetail", "FamilyDetail")
                        .WithMany("FamilyMemberDetails")
                        .HasForeignKey("FamilyDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FamilyDetail");
                });

            modelBuilder.Entity("Backend.Model.Domain.JobRole", b =>
                {
                    b.HasOne("Backend.Model.Domain.Department", "Department")
                        .WithMany("JobRoles")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Backend.Model.Domain.Leave", b =>
                {
                    b.HasOne("Backend.Model.Domain.Employee", "Employee")
                        .WithMany("Leave")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Domain.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("LeaveType");
                });

            modelBuilder.Entity("Backend.Model.Domain.Payroll", b =>
                {
                    b.HasOne("Backend.Model.Domain.Employee", "Employee")
                        .WithMany("Payroll")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Backend.Model.Domain.Project", b =>
                {
                    b.HasOne("Backend.Model.Domain.Image", "ProjectImage")
                        .WithMany()
                        .HasForeignKey("ProjectImageUrl");

                    b.Navigation("ProjectImage");
                });

            modelBuilder.Entity("Backend.Model.Domain.SalaryStructure", b =>
                {
                    b.HasOne("Backend.Model.Domain.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Backend.Model.Domain.WorkExperience", b =>
                {
                    b.HasOne("Backend.Model.Domain.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Model.Domain.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("JobRoles");
                });

            modelBuilder.Entity("Backend.Model.Domain.Employee", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Attendance");

                    b.Navigation("Certificates");

                    b.Navigation("ContactDetails")
                        .IsRequired();

                    b.Navigation("Educations");

                    b.Navigation("EmployeeProjects");

                    b.Navigation("FamilyDetail")
                        .IsRequired();

                    b.Navigation("Leave");

                    b.Navigation("Payroll");
                });

            modelBuilder.Entity("Backend.Model.Domain.FamilyDetail", b =>
                {
                    b.Navigation("FamilyMemberDetails");
                });

            modelBuilder.Entity("Backend.Model.Domain.Project", b =>
                {
                    b.Navigation("EmployeeProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
